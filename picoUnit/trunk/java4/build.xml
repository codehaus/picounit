<?xml version="1.0" encoding="UTF-8"?>
<project default="test" name="picounit" basedir=".">
	<property name="javaVersion" value="1.4"/>

	<property file="../build.properties"/>
	<import file="../build-common.xml"/>
	
	<taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask" classpath="${jarjar-jar}"/>

	<target name="dist">
		<zip destfile="${distDir}/picounit-${version}.zip">
			<zipfileset dir="${distDir}" includes="picounit-*.jar"/>
			<zipfileset dir="${libDir}" includes="*.jar"/>
		</zip>
	</target>

	<target name="compile" depends="compileCore, compileJMocker, compileUnitTestModel, compileUnitTests, compileFunctionalTests, compileExampleTests"/>

	<target name="compileCore" description="o Compile the code" depends="init">
		<javac destdir="${coreClasses}" target="${javaVersion}" source="${javaVersion}" deprecation="true" debug="true" optimize="false">
			<src>
				<pathelement location="${apiSource}"/>
				<pathelement location="${implementationSource}"/>
			</src>
			<classpath>
				<fileset dir="${libDir}">
					<include name="*.jar"/>
				</fileset>
			</classpath>
		</javac>
		<copy todir="${coreClasses}">
			<fileset dir="${apiSource}">
				<include name="**/*"/>
			</fileset>
			<fileset dir="${implementationSource}">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>
	
	<target name="compileJMocker" depends="compileCore">
		<javac destdir="${jmockerClasses}" target="${javaVersion}" source="${javaVersion}"
			deprecation="true" debug="true" optimize="false">
			<src>
				<pathelement location="${jmockerSource}"/>
			</src>
			<classpath>
				<fileset dir="${libDir}">
					<include name="*.jar"/>
				</fileset>
				<path location="${coreClasses}"/>
			</classpath>
		</javac>
		<copy todir="${jmockerClasses}">
			<fileset dir="${jmockerSource}">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>
		
	<target name="compileUnitTestModel" depends="compileCore, compileJMocker">
		<javac destdir="${unitTestModelClasses}" target="${javaVersion}" source="${javaVersion}" deprecation="true" debug="true" optimize="false">
			<src>
				<pathelement location="${unitTestModelSource}"/>
			</src>
			<classpath>
				<fileset dir="${libDir}">
					<include name="*.jar"/>
				</fileset>
				<path location="${coreClasses}"/>
				<path location="${jmockerClasses}"/>
				<fileset dir="${buildLibDir}">
					<include name="*.jar"/>
				</fileset>
			</classpath>
		</javac>
		<copy todir="${unitTestModelClasses}">
			<fileset dir="${unitTestModelSource}">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>

	<target name="compileUnitTests" depends="compileCore, compileJMocker, compileUnitTestModel">
		<javac destdir="${unitTestClasses}" target="${javaVersion}" source="${javaVersion}" deprecation="true" debug="true" optimize="false">
			<src>
				<pathelement location="${unitTestSource}"/>
			</src>
			<classpath>
				<fileset dir="${libDir}">
					<include name="*.jar"/>
				</fileset>
				<path location="${coreClasses}"/>
				<path location="${jmockerClasses}"/>
				<path location="${unitTestModelClasses}"/>
				<fileset dir="${buildLibDir}">
					<include name="*.jar"/>
				</fileset>
			</classpath>
		</javac>
		<copy todir="${unitTestClasses}">
			<fileset dir="${unitTestSource}">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>

	<target name="compileFunctionalTests" depends="compileCore, compileJMocker, compileUnitTestModel">
		<javac destdir="${functionalTestClasses}" target="${javaVersion}" source="${javaVersion}" deprecation="true" debug="true" optimize="false">
			<src>
				<pathelement location="${functionalTestSource}"/>
			</src>
			<classpath>
				<fileset dir="${libDir}">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${buildLibDir}">
					<include name="*.jar"/>
				</fileset>
				<path location="${coreClasses}"/>
				<path location="${jmockerClasses}"/>
				<path location="${unitTestModelClasses}"/>
			</classpath>
		</javac>
		<copy todir="${functionalTestClasses}">
			<fileset dir="${functionalTestSource}">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>

	<target name="compileExampleTests" depends="compileCore, compileJMocker, compileUnitTestModel">
		<javac destdir="${exampleTestClasses}" target="${javaVersion}" source="${javaVersion}" deprecation="true" debug="true" optimize="false">
			<src>
				<pathelement location="${exampleTestSource}"/>
			</src>
			<classpath>
				<fileset dir="${libDir}">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${buildLibDir}">
					<include name="*.jar"/>
				</fileset>
				<path location="${coreClasses}"/>
				<path location="${jmockerClasses}"/>
			</classpath>
		</javac>
		<copy todir="${functionalTestClasses}">
			<fileset dir="${functionalTestSource}">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>

	<target name="jar" description="o Create the jars" depends="compile, test, jarApi, jarCore, jarJMocker"/>

	<target name="jarApi" depends="compileCore, test">
		<jar jarfile="${apiJar}" basedir="${coreClasses}">
			<include name="picounit/*"/>
			<include name="picounit/mocker/*"/>
		</jar>
	</target>

	<target name="jarCore" depends="compileCore, test">
		<jar jarfile="${coreJar}" basedir="${coreClasses}">
			<include name="**"/>
			<exclude name="picounit/*"/>
			<exclude name="picounit/mocker/*"/>
		</jar>
	</target>
	
	<target name="repackageCore" depends="jarCore">
		<repackageJarAndAppendPlugin repackagedJar="${buildLibDir}/previous-picounit-core.jar"
			originalJar="${coreJar}" pluginClass="picounit.registry.DefaultPlugin"/>
	</target>

	<target name="jarJMocker" depends="compileJMocker, test">
		<jar jarfile="${jmockerJar}" basedir="${jmockerClasses}"/>
	</target>

	<target name="test" description="o Run the test cases">
		<junit dir="./" printSummary="yes" fork="true" haltonerror="true" haltonfailure="true">
			<sysproperty key="basedir" value="."/>
			<formatter type="xml"/>
			<classpath>
				<fileset dir="${distDir}">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${libDir}">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${buildLibDir}">
					<include name="*.jar"/>
				</fileset>
				<path location="${coreClasses}"/>
				<path location="${jmockerClasses}"/>
				<path location="${unitTestClasses}"/>
				<path location="${unitTestModelClasses}"/>
				<path location="${functionalTestClasses}"/>
				<path location="${exampleTestClasses}"/>
			</classpath>
			<batchtest todir="${testReports}">
				<fileset dir="${unitTestSource}">
					<include name="**/**TestSuite.java"/>
					<exclude name="**/Abstract*.java"/>
				</fileset>
				<fileset dir="${functionalTestSource}">
					<include name="**/**TestSuite.java"/>
					<exclude name="**/Abstract*.java" />
				</fileset>
				<fileset dir="${exampleTestSource}">
					<include name="**/**TestSuite.java"/>
					<exclude name="**/Abstract*.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
</project>